#!/usr/bin/env python3
"""
run_app_v2.py
–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ª–∞–ø –≤–µ—Ä—Å–∏–∏ 2.0
"""

import sys
import os
from pathlib import Path
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_modules = [
        ('PyQt5', 'PyQt5'),
        ('cv2', 'opencv-python'),
        ('numpy', 'numpy'),
        ('pandas', 'pandas'),
        ('matplotlib', 'matplotlib'),
        ('scipy', 'scipy'),
        ('sklearn', 'scikit-learn'),
        ('seaborn', 'seaborn'),
        ('PIL', 'Pillow'),
        ('yaml', 'PyYAML'),
        ('skimage', 'scikit-image')
    ]
    
    missing_modules = []
    
    for module_name, package_name in required_modules:
        try:
            __import__(module_name)
        except ImportError:
            missing_modules.append(package_name)
    
    if missing_modules:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏:")
        for module in missing_modules:
            print(f"   - {module}")
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"   pip install {' '.join(missing_modules)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_test_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    test_files = [
        Path("old/test.mp4"),
        Path("old/test.csv"),
        Path("config.yaml")
    ]
    
    missing_files = []
    for file_path in test_files:
        if not file_path.exists():
            missing_files.append(str(file_path))
    
    if missing_files:
        print("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        print("\nüí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("   –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        return False
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True


def create_default_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    config_path = Path("config.yaml")
    
    if not config_path.exists():
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        default_config = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ª–∞–ø
# Project definitions
Task: PawAnalysis
scorer: DefaultAnalyzer
date: Auto
multianimalproject: false

# –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
bodyparts:
- lf_digit1
- lf_digit2
- lf_digit3
- lf_digit4
- lf_center
- lf_heel
- rf_digit1
- rf_digit2
- rf_digit3
- rf_digit4
- rf_center
- rf_heel
- lb_digit1
- lb_digit2
- lb_digit3
- lb_digit4
- lb_digit5
- lb_center
- lb_heel
- rb_digit1
- rb_digit2
- rb_digit3
- rb_digit4
- rb_digit5
- rb_center
- rb_heel

# –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å–∫–µ–ª–µ—Ç–∞
skeleton:
- [lf_digit1, lf_center]
- [lf_digit2, lf_center]
- [lf_digit3, lf_center]
- [lf_digit4, lf_center]
- [lf_center, lf_heel]
- [rf_digit1, rf_center]
- [rf_digit2, rf_center]
- [rf_digit3, rf_center]
- [rf_digit4, rf_center]
- [rf_center, rf_heel]
- [lb_digit1, lb_center]
- [lb_digit2, lb_center]
- [lb_digit3, lb_center]
- [lb_digit4, lb_center]
- [lb_digit5, lb_center]
- [lb_center, lb_heel]
- [rb_digit1, rb_center]
- [rb_digit2, rb_center]
- [rb_digit3, rb_center]
- [rb_digit4, rb_center]
- [rb_digit5, rb_center]
- [rb_center, rb_heel]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
skeleton_color: yellow
pcutoff: 0.6
dotsize: 3
alphavalue: 0.7
colormap: rainbow

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
start: 0
stop: 1
numframes2pick: 20
"""
        
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(default_config)
        
        print(f"‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {config_path}")


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = ['old', 'results', 'exports', 'temp']
    for dir_name in directories:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    create_default_config()
    
    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("=" * 60)
    print("ü¶∂ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –û–¢–ü–ï–ß–ê–¢–ö–û–í –õ–ê–ü v2.0")
    print("   –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π")
    print("=" * 60)
    print()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        if not check_dependencies():
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        print()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        setup_environment()
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        print("üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        check_test_files()
        print()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        from PyQt5.QtWidgets import QApplication
        from PyQt5.QtCore import Qt
        from PyQt5.QtGui import QPalette, QColor
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = QApplication(sys.argv)
        app.setApplicationName("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ª–∞–ø v2.0")
        app.setApplicationVersion("2.0.0")
        app.setStyle("Fusion")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        palette = QPalette()
        palette.setColor(QPalette.Window, QColor(30, 30, 30))
        palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
        palette.setColor(QPalette.Base, QColor(42, 42, 42))
        palette.setColor(QPalette.AlternateBase, QColor(66, 66, 66))
        palette.setColor(QPalette.ToolTipBase, QColor(0, 0, 0))
        palette.setColor(QPalette.ToolTipText, QColor(255, 255, 255))
        palette.setColor(QPalette.Text, QColor(255, 255, 255))
        palette.setColor(QPalette.Button, QColor(64, 64, 64))
        palette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
        palette.setColor(QPalette.BrightText, QColor(255, 0, 0))
        palette.setColor(QPalette.Link, QColor(42, 130, 218))
        palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
        palette.setColor(QPalette.HighlightedText, QColor(0, 0, 0))
        app.setPalette(palette)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        from main_window_v2 import MainWindowV2
        
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
        print()
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ª–∞–ø –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("   ‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π")
        print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
        print()
        
        window = MainWindowV2()
        window.show()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        sys.exit(app.exec_())
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π")
        print("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –≤ —Ñ–∞–π–ª–µ requirements.txt")
        traceback.print_exc()
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üêõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main()